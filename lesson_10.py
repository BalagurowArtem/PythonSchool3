

print("Hello World")

# hhhh

"""
1. Создать проект
2. Инициализировать гит
git init
3. Создать окружение
4. Добавить в гитигнор файлы окружения
5. Сделать файл lesson_10.py
5.1 Создать .gitignore
5.2 Добавить в него виртуальное окружение
- Pycharm создат автоматически
- VS Code
    1. python -m venv vevn
       venv/Scripts/activate
    2. Что более преподчитетльнее, потому что он запомнит окружение
    и будет включать его при октрытии проекта
    ctrl + shift + P
    Выбор интерпретатора
    Создание виртуальной среды
    Venv
    Выбрать интерпретатор из системных (у вас может быть несколько версий быть в системе)
   
6. Сделать первые коммиты
- git add <file_name>
- git commit -m "message"
7. Добавить файлы в гит
8. Закоммитить изменения
9. Запушить изменения в гитхаб
"""

"""
 
1. **Инициализация репозитория**:
   ```bash
   git init
   ```
   Эта команда создаёт новый пустой репозиторий Git в текущем каталоге. После её выполнения в каталоге появится скрытая папка `.git`, в которой будут храниться все метаданные репозитория.
 
2. **Проверка статуса**:
   ```bash
   git status
   ```
   Эта команда показывает текущее состояние репозитория, включая информацию о файлах, которые были изменены, добавлены в индекс или не отслеживаются. Это полезно для понимания текущего положения дел в репозитории.
 
3. **Добавление изменений в индекс**:
   ```bash
   git add <файл>
   ```
   или для добавления всех изменённых файлов:
   ```bash
   git add .
   ```
   Команда `git add` добавляет изменения в индекс (или staging area), подготавливая их к коммиту. Укажите имя файла, чтобы добавить конкретный файл, или используйте `.` для добавления всех изменений.
 
4. **Создание коммита**:
   ```bash
   git commit -m "Сообщение коммита"
   ```
   Эта команда фиксирует изменения, которые были добавлены в индекс. Сообщение коммита должно кратко описывать сделанные изменения. Это важно для отслеживания истории изменений в проекте.
 
Пример последовательности команд:
```bash
git init                 # Инициализация репозитория
git status               # Проверка статуса
git add .                # Добавление всех изменений в индекс
git commit -m "Первый коммит"  # Создание коммита с сообщением
"""